
【チーム開発　1日の流れ】
	9:00	本日の共有事項
	9:05	デイリー・スクラム(朝会)
		各班のデイリースクラムリーダーが司会
		全員が立ちチームごとに
　　　　　　　　　　「昨日行った作業」
　　　　　　　　　　「本日行う作業」
		「障害となっていること」
　　　　　　　　　　を一人ずつ簡潔に発表する
		時間は簡潔に5分以内とし、上記以外の話し合いは次のチームミーティングで行う
	9:10	チームミーティング
		リーダー、進捗管理リーダーが中心になり、チーム内の
		共有事項についてや進捗についての話し合いを行う
	9:30  チーム開発スタート！納期厳守！
		開発は何が起こるかわからないので、できる限り前倒しを心掛ける
	16:30	進捗管理MTG
		講師と進捗管理リーダーが集まり、その日の進捗を報告する
	16:45  各リーダーMTG
		その他、必要があれば講師と各リーダーがMTGを行い、情報を
		共有したり、懸念点の解消を行う


1日目：チーム役割決め、仕様把握
　〇チームを発表し、席替え後、役割を決める(10分)
　　・総リーダー
　　　⇒全体の取りまとめ役。
　　　　毎日MTGでチームの雰囲気や状況を報告、必要であれば他の班のリーダーと相談し解決策を模索
　　・進捗管理リーダー
　　　⇒進捗管理MTG前にチームメンバーのその日の作業内容を確認。
　　　　毎日16時半から講師とMTGを行いにチームメンバーの進捗を講師へ報告
　　　　遅れが出ている場合は、リーダーと共にリカバリー策を考え講師に相談する
　　　　Redmine or Trelloが進んでいなければ指摘をする
　　・成果物リーダー
　　　⇒必要な成果物を責任を持って把握し、揃え、講師からレビューを受けたり提出をする。
　　　　発表会準備の中心となる。
　　・デイリースクラム(朝会)リーダー
　　　⇒デイリースクラム(朝会)の司会を行う
　　　　朝8:55になったら講師から連絡事項があるので確認し、
　　　　チームミーティングで全員に共有する
　　・技術リーダー
　　　⇒技術的に不明な点を調べたり他チームや講師に聞きに行く人、技術理解度は関係がない
　　　　デイリースクラムで同じ班に「障害となっていること」が挙がったら
　　　　即座に解決に向けて動く

　※役割が決まったら成果物リーダーは講師まで決まった役割をメールで送ってください


==(パターン１)==============================
　〇バージョン管理
　　GitHubを使用する
　　https://github.com

　〇タスク管理
　　Trelloを使用する
　　https://trello.com
==========================================


==(パターン２)==============================
　〇partnersへの参加
　　開発中は全員partnersのNWで行う

　〇バージョン管理
　　Gitbucketを使用する
　　https://172.16.0.14/gitbucket/signin
　　・アカウント登録を行う

　〇タスク管理
　　Redmineを使用する
　　http://172.16.0.13:3000/
　　・yyyymmAなどというプロジェクトをチーム数分作成する
　　・そのプロジェクトにメンバー登録をしてもらう
　　　(リーダーはmanager権限をつけて文書やwikiなどの設定ができるようにする)
==========================================

　〇各ドキュメントの説明
　　・1.ユースケース図
　　・2.ユースケース記述
　　・3.ドメインモデル
　　・4.クラス図(設計指針)
　　・5.HTMLモック

　〇仕様確認
　　・チームで仕様の確認、および誰がどの機能を作成するかを決定

　※終わり次第、次の日以降の作業を前倒しでどんどん進める

2日目：詳細設計、開発環境準備
　〇各担当毎に作業実施
　　(1)ユースケース記述の再確認
　　　自分担当のユースケース記述がない場合は講師に伝える
   (2)テスト仕様書の作成
　　　テスト仕様書を作成する
　　　作成後、講師から解答例をもらい、抜けや漏れがあればそれを自分のテストケースに反映させる
　　(3)クラス図(手書きorツール)
　　　チームごとに助け合いながら作成し、作成後、講師のレビューを受ける
　　(4)見積もり(Redmine or Trello)
　　　作成後、講師のレビューは特に必要がないが、自分で見積もった
　　　時間と実際にかかった時間を必ず記録し、ずれていたら何が原因だった
　　　のかを分析し、次に活かすこと(見積もりの制度を上げるのが目的)

　　　Ticket First and No Ticket , No Work!


3～5日目：実装、テスト
　〇チーム毎に「事前準備.txt」の内容実施
　〇チーム毎にリモートリポジトリを作成
　〇各担当毎に実装
　〇バグFix,品質改善,機能追加
　〇テストの実施(今回は実装の強化を優先するためテストは任意とします)
　　※講師から配布されたテスト仕様書を基にブラックボックステストを実施する
　　　この際、テストケースに不備や追加があれば講師に連絡し修正をお願いします
　

6日目：受入テスト＆指摘事項対応＆バグFix＆品質改善
　〇テスト実施後、必ず講師による受入テストを受ける
　　・コードレビューは今までたくさんやってきたため行わないが
　　　読みやすいコードになっているかJavadocコメントはきちんと
　　　書けているかをチーム内でチェックすること
　　・受入テストは、細かいところに気を遣えているかを中心に確認します。

6日目：発表準備
　　・パワーポイントを使って資料の作成
　　・練習を念入りに行うこと

7日目：発表準備、発表
　 9:00～　最後のデイリースクラム
　 9:15～　チームミーティング
　 9:40～　チーム毎に分かれて作業
　 　　　　品質改善、バグFix、発表準備(担当決め、順番決め)
　10:00～　準備ができ次第、各班で発表練習を行う
　　　　　 ローカルで動いていても前に出ると動かなくなることが多々ある
　　　　　 ので入念な準備を！
　12:00～　昼休み
　13:00～　最終準備(発表PC、プロジェクタ準備、会場設営)
　14:00～　最終成果発表会
　　　　　 各チーム毎に発表を行う
　　　　　 必ず全員が自分が担当した機能についての説明をすること
　　　　　 研修を受けさせてもらった会社、見に来てくださった方々へ
　　　　　 感謝を込めて感動させましょう！

　　(参考)個々人の発表時、説明することの例
　　　・自分が作った機能
　　　・工夫した点/苦労した点
　　　・(今後の改善点)
　　　ここでダラダラ説明してしまう人は顔合わせの結果が悪い傾向にある

【発表会スケジュール】
　 開式 14:30～14:40
 　Aチーム発表 14:40～15:05
　 Bチーム発表 15:10～15:35
　 Cチーム発表 15:35～16:00
　 総評 16:00～


【発表時間配分例】
　・システム概要説明(5分)
　　システムのコンセプト
　　チーム全体で工夫した点など

　・システム実演(5分)

　・個人の成果報告 2分×5名=(10分)
　　※実演しながらでも良い
　　・担当機能
　　・工夫した点、難しかった点
　　　セキュリティ考慮やJavaScriptを使った
　　　講義で習っていない技術を使用したなど
　　　※時間の関係上、2か月半の研修を受けての感想は割愛しましょう

　・質疑応答 5分

　※2時間ぎりぎりのため時間厳守、必ず発表は20分で終わらせるようにしてください

〇発表会後
　・最終成果物をGitbuckatへpushする
　・発表会資料を「プロジェクト名\documents」に入れる
　・担当箇所の仕様共有(クレジットカード決済やメール送信など、各自で行った技術内容を
　　チームメンバーに共有し、全員が理解できるような環境を作る
　・スペックシートの更新(育成担当から説明があります)
　※みなさんが作業している間、伊賀は育成担当と振り返りミーティングを行います
